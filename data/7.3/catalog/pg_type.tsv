Index	Name	Type	Nullable	References	Description
0	typname	name			"data type name"
1	typnamespace	oid		pg_namespace.oid	"the oid of the namespace that contains this type"
2	typowner	int4		pg_shadow.usesysid	"owner (creator) of the type"
3	typlen	int2			"for a fixed-size type, typlen is the number of bytes in the internal representation of the type. but for a variable-length type, typlen is negative. -1 indicates a ""varlena"" type (one that has a length word), -2 indicates a null-terminated c string."
4	typbyval	bool			"typbyval determines whether internal routines pass a value of this type by value or by reference. only char, short, and int equivalent items can be passed by value, so if the type is not 1, 2, or 4 bytes long, postgresql does not have the option of passing by value and so typbyval had better be false. variable-length types are always passed by reference. note that typbyval can be false even if the length would allow pass-by-value; this is currently true for type float4, for example."
5	typtype	char			"typtype is b for a base type, c for a complex type (i.e., a table's row type), d for a derived type (i.e., a domain), or p for a pseudo-type. see also typrelid and typbasetype."
6	typisdefined	bool			"true if the type is defined, false if this is a placeholder entry for a not-yet-defined type. when typisdefined is false, nothing except the type name, namespace, and oid can be relied on."
7	typdelim	char			"character that separates two values of this type when parsing array input. note that the delimiter is associated with the array element data type, not the array data type."
8	typrelid	oid		pg_class.oid	"if this is a complex type (see typtype), then this field points to the pg_class entry that defines the corresponding table. (for a free-standing composite type, the pg_class entry doesn't really represent a table, but it is needed anyway for the type's pg_attribute entries to link to.) zero for non-complex types."
9	typelem	oid		pg_type.oid	"if typelem is not 0 then it identifies another row in pg_type. the current type can then be subscripted like an array yielding values of type typelem. a ""true"" array type is variable length (typlen = -1), but some fixed-length (typlen > 0) types also have nonzero typelem, for example name and oidvector. if a fixed-length type has a typelem then its internal representation must be n values of the typelem data type with no other data. variable-length array types have a header defined by the array subroutines."
10	typinput	regproc		pg_proc.oid	"input conversion function"
11	typoutput	regproc		pg_proc.oid	"output conversion function"
12	typalign	char			"typalign is the alignment required when storing a value of this type. it applies to storage on disk as well as most representations of the value inside postgresql. when multiple values are stored consecutively, such as in the representation of a complete row on disk, padding is inserted before a datum of this type so that it begins on the specified boundary. the alignment reference is the beginning of the first datum in the sequence. possible values are: 'c' = char alignment, i.e., no alignment needed. 's' = short alignment (2 bytes on most machines). 'i' = int alignment (4 bytes on most machines). 'd' = double alignment (8 bytes on many machines, but by no means all). note: for types used in system tables, it is critical that the size and alignment defined in pg_type agree with the way that the compiler will lay out the field in a struct representing a table row."
13	typstorage	char			"typstorage tells for varlena types (those with typlen = -1) if the type is prepared for toasting and what the default strategy for attributes of this type should be. possible values are 'p': value must always be stored plain. 'e': value can be stored in a ""secondary"" relation (if relation has one, see pg_class.reltoastrelid). 'm': value can be stored compressed inline. 'x': value can be stored compressed inline or in ""secondary"". note that 'm' fields can also be moved out to secondary storage, but only as a last resort ('e' and 'x' fields are moved first)."
14	typnotnull	bool			"typnotnull represents a not null constraint on a type. presently used for domains only."
15	typbasetype	oid		pg_type.oid	"if this is a derived type (see typtype), then typbasetype identifies the type that this one is based on. zero if not a derived type."
16	typtypmod	int4			"domains use typtypmod to record the typmod to be applied to their base type (-1 if base type does not use a typmod). -1 if this type is not a domain."
17	typndims	int4			"typndims is the number of array dimensions for a domain that is an array (that is, typbasetype is an array type; the domain's typelem will match the base type's typelem). zero for non-domains and non-array domains."
18	typdefaultbin	text			"if typdefaultbin is not null, it is the nodetostring representation of a default expression for the type. currently this is only used for domains."
19	typdefault	text			"typdefault is null if the type has no associated default value. if typdefaultbin is not null, typdefault must contain a human-readable version of the default expression represented by typdefaultbin. if typdefaultbin is null and typdefault is not, then typdefault is the external representation of the type's default value, which may be fed to the type's input converter to produce a constant."
