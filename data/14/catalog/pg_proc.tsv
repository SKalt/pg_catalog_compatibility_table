0	oid	OID			"row identifier"
1	proname	NAME			"name of the function"
2	pronamespace	OID			"the oid of the namespace that contains this function"
3	proowner	OID			"owner of the function"
4	prolang	OID			"implementation language or call interface of this function"
5	procost	FLOAT4			"estimated execution cost (in units of cpu_operator_cost); if proretset, this is cost per row returned"
6	prorows	FLOAT4			"estimated number of result rows (zero if not proretset)"
7	provariadic	OID			"data type of the variadic array parameter's elements, or zero if the function does not have a variadic parameter"
8	prosupport	REGPROC			"planner support function for this function (see section 38.11), or zero if none"
9	prokind	CHAR			"f for a normal function, p for a procedure, a for an aggregate function, or w for a window function"
10	prosecdef	BOOL			"function is a security definer (i.e., a “setuid” function)"
11	proleakproof	BOOL			"the function has no side effects. no information about the arguments is conveyed except via the return value. any function that might throw an error depending on the values of its arguments is not leak-proof."
12	proisstrict	BOOL			"function returns null if any call argument is null. in that case the function won't actually be called at all. functions that are not “strict” must be prepared to handle null inputs."
13	proretset	BOOL			"function returns a set (i.e., multiple values of the specified data type)"
14	provolatile	CHAR			"provolatile tells whether the function's result depends only on its input arguments, or is affected by outside factors. it is i for “immutable” functions, which always deliver the same result for the same inputs. it is s for “stable” functions, whose results (for fixed inputs) do not change within a scan. it is v for “volatile” functions, whose results might change at any time. (use v also for functions with side-effects, so that calls to them cannot get optimized away.)"
15	proparallel	CHAR			"proparallel tells whether the function can be safely run in parallel mode. it is s for functions which are safe to run in parallel mode without restriction. it is r for functions which can be run in parallel mode, but their execution is restricted to the parallel group leader; parallel worker processes cannot invoke these functions. it is u for functions which are unsafe in parallel mode; the presence of such a function forces a serial execution plan."
16	pronargs	INT2			"number of input arguments"
17	pronargdefaults	INT2			"number of arguments that have defaults"
18	prorettype	OID			"data type of the return value"
19	proargtypes	OIDVECTOR			"an array of the data types of the function arguments. this includes only input arguments (including inout and variadic arguments), and thus represents the call signature of the function."
20	proallargtypes	OID[]			"an array of the data types of the function arguments. this includes all arguments (including out and inout arguments); however, if all the arguments are in arguments, this field will be null. note that subscripting is 1-based, whereas for historical reasons proargtypes is subscripted from 0."
21	proargmodes	CHAR[]			"an array of the modes of the function arguments, encoded as i for in arguments, o for out arguments, b for inout arguments, v for variadic arguments, t for table arguments. if all the arguments are in arguments, this field will be null. note that subscripts correspond to positions of proallargtypes not proargtypes."
22	proargnames	TEXT[]			"an array of the names of the function arguments. arguments without a name are set to empty strings in the array. if none of the arguments have a name, this field will be null. note that subscripts correspond to positions of proallargtypes not proargtypes."
23	proargdefaults	PG_NODE_TREE			"expression trees (in nodetostring() representation) for default values. this is a list with pronargdefaults elements, corresponding to the last n input arguments (i.e., the last n proargtypes positions). if none of the arguments have defaults, this field will be null."
24	protrftypes	OID[]			"an array of the argument/result data type(s) for which to apply transforms (from the function's transform clause). null if none."
25	prosrc	TEXT			"this tells the function handler how to invoke the function. it might be the actual source code of the function for interpreted languages, a link symbol, a file name, or just about anything else, depending on the implementation language/call convention."
26	probin	TEXT			"additional information about how to invoke the function. again, the interpretation is language-specific."
27	prosqlbody	PG_NODE_TREE			"pre-parsed sql function body. this is used for sql-language functions when the body is given in sql-standard notation rather than as a string literal. it's null in other cases."
28	proconfig	TEXT[]			"function's local settings for run-time configuration variables"
29	proacl	ACLITEM[]			"access privileges; see section 5.7 for details"
