Name	Type	References	Description
oid	oid	 	Row identifier (hidden attribute; must be explicitly selected)
proname	name	 	Name of the function
pronamespace	oid	pg_namespace.oid	The OID of the namespace that contains this function
proowner	oid	pg_authid.oid	Owner of the function
prolang	oid	pg_language.oid	Implementation language or call interface of this function
procost	float4	 	Estimated execution cost (in units of cpu_operator_cost); if proretset, this is cost per row returned
prorows	float4	 	Estimated number of result rows (zero if not proretset)
provariadic	oid	pg_type.oid	Data type of the variadic array parameter's elements, or zero if the function does not have a variadic parameter
protransform	regproc	pg_proc.oid	Calls to this function can be simplified by this other function (see Section 37.9.10)
proisagg	bool	 	Function is an aggregate function
proiswindow	bool	 	Function is a window function
prosecdef	bool	 	Function is a security definer (i.e., a "setuid” function)
proleakproof	bool	 	The function has no side effects. No information about the arguments is conveyed except via the return value. Any function that might throw an error depending on the values of its arguments is not leak-proof.
proisstrict	bool	 	Function returns null if any call argument is null. In that case the function won't actually be called at all. Functions that are not "strict” must be prepared to handle null inputs.
proretset	bool	 	Function returns a set (i.e., multiple values of the specified data type)
provolatile	char	 	provolatile tells whether the function's result depends only on its input arguments, or is affected by outside factors. It is i for "immutable” functions, which always deliver the same result for the same inputs. It is s for “stable” functions, whose results (for fixed inputs) do not change within a scan. It is v for “volatile” functions, whose results might change at any time. (Use v also for functions with side-effects, so that calls to them cannot get optimized away.)
proparallel	char	 	proparallel tells whether the function can be safely run in parallel mode. It is s for functions which are safe to run in parallel mode without restriction. It is r for functions which can be run in parallel mode, but their execution is restricted to the parallel group leader; parallel worker processes cannot invoke these functions. It is u for functions which are unsafe in parallel mode; the presence of such a function forces a serial execution plan.
pronargs	int2	 	Number of input arguments
pronargdefaults	int2	 	Number of arguments that have defaults
prorettype	oid	pg_type.oid	Data type of the return value
proargtypes	oidvector	pg_type.oid	An array with the data types of the function arguments. This includes only input arguments (including INOUT and VARIADIC arguments), and thus represents the call signature of the function.
proallargtypes	oid[]	pg_type.oid	An array with the data types of the function arguments. This includes all arguments (including OUT and INOUT arguments); however, if all the arguments are IN arguments, this field will be null. Note that subscripting is 1-based, whereas for historical reasons proargtypes is subscripted from 0.
proargmodes	char[]	 	An array with the modes of the function arguments, encoded as i for IN arguments, o for OUT arguments, b for INOUT arguments, v for VARIADIC arguments, t for TABLE arguments. If all the arguments are IN arguments, this field will be null. Note that subscripts correspond to positions of proallargtypes not proargtypes.
proargnames	text[]	 	An array with the names of the function arguments. Arguments without a name are set to empty strings in the array. If none of the arguments have a name, this field will be null. Note that subscripts correspond to positions of proallargtypes not proargtypes.
proargdefaults	pg_node_tree	 	Expression trees (in nodeToString() representation) for default values. This is a list with pronargdefaults elements, corresponding to the last N input arguments (i.e., the last N proargtypes positions). If none of the arguments have defaults, this field will be null.
protrftypes	oid[]	 	Data type OIDs for which to apply transforms.
prosrc	text	 	This tells the function handler how to invoke the function. It might be the actual source code of the function for interpreted languages, a link symbol, a file name, or just about anything else, depending on the implementation language/call convention.
probin	text	 	Additional information about how to invoke the function. Again, the interpretation is language-specific.
proconfig	text[]	 	Function's local settings for run-time configuration variables
proacl	aclitem[]	 	Access privileges; see GRANT and REVOKE for details