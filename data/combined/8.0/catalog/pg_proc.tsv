Name	Type	Nullable	References	Description
proacl	aclitem[]			"access privileges; see grant and revoke for details."
proargnames	text[]			"an array with the names of the function arguments. arguments without a name are set to empty strings in the array. if none of the arguments have a name, this field may be null."
proargtypes	oidvector		pg_type.oid	"an array with the data types of the function arguments"
probin	bytea			"additional information about how to invoke the function. again, the interpretation is language-specific."
proisagg	bool			"function is an aggregate function"
proisstrict	bool			"function returns null if any call argument is null. in that case the function won't actually be called at all. functions that are not ""strict"" must be prepared to handle null inputs."
prolang	oid		pg_language.oid	"implementation language or call interface of this function"
proname	name			"name of the function"
pronamespace	oid		pg_namespace.oid	"the oid of the namespace that contains this function"
pronargs	int2			"number of arguments"
proowner	int4		pg_shadow.usesysid	"owner of the function"
proretset	bool			"function returns a set (i.e., multiple values of the specified data type)"
prorettype	oid		pg_type.oid	"data type of the return value"
prosecdef	bool			"function is a security definer (i.e., a ""setuid"" function)"
prosrc	text			"this tells the function handler how to invoke the function. it might be the actual source code of the function for interpreted languages, a link symbol, a file name, or just about anything else, depending on the implementation language/call convention."
provolatile	char			"provolatile tells whether the function's result depends only on its input arguments, or is affected by outside factors. it is i for ""immutable"" functions, which always deliver the same result for the same inputs. it is s for ""stable"" functions, whose results (for fixed inputs) do not change within a scan. it is v for ""volatile"" functions, whose results may change at any time. (use v also for functions with side-effects, so that calls to them cannot get optimized away.)"
