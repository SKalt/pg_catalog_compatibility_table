0	oid	OID			"row identifier"
1	typname	NAME			"data type name"
2	typnamespace	OID			"the oid of the namespace that contains this type"
3	typowner	OID			"owner of the type"
4	typlen	INT2			"for a fixed-size type, typlen is the number of bytes in the internal representation of the type. but for a variable-length type, typlen is negative. -1 indicates a “varlena” type (one that has a length word), -2 indicates a null-terminated c string."
5	typbyval	BOOL			"typbyval determines whether internal routines pass a value of this type by value or by reference. typbyval had better be false if typlen is not 1, 2, or 4 (or 8 on machines where datum is 8 bytes). variable-length types are always passed by reference. note that typbyval can be false even if the length would allow pass-by-value."
6	typtype	CHAR			"typtype is b for a base type, c for a composite type (e.g., a table's row type), d for a domain, e for an enum type, p for a pseudo-type, r for a range type, or m for a multirange type. see also typrelid and typbasetype."
7	typcategory	CHAR			"typcategory is an arbitrary classification of data types that is used by the parser to determine which implicit casts should be “preferred”. see table 53.65."
8	typispreferred	BOOL			"true if the type is a preferred cast target within its typcategory"
9	typisdefined	BOOL			"true if the type is defined, false if this is a placeholder entry for a not-yet-defined type. when typisdefined is false, nothing except the type name, namespace, and oid can be relied on."
10	typdelim	CHAR			"character that separates two values of this type when parsing array input. note that the delimiter is associated with the array element data type, not the array data type."
11	typrelid	OID			"if this is a composite type (see typtype), then this column points to the pg_class entry that defines the corresponding table. (for a free-standing composite type, the pg_class entry doesn't really represent a table, but it is needed anyway for the type's pg_attribute entries to link to.) zero for non-composite types."
12	typsubscript	REGPROC			"subscripting handler function's oid, or zero if this type doesn't support subscripting. types that are “true” array types have typsubscript = array_subscript_handler, but other types may have other handler functions to implement specialized subscripting behavior."
13	typelem	OID			"if typelem is not zero then it identifies another row in pg_type, defining the type yielded by subscripting. this should be zero if typsubscript is zero. however, it can be zero when typsubscript isn't zero, if the handler doesn't need typelem to determine the subscripting result type. note that a typelem dependency is considered to imply physical containment of the element type in this type; so ddl changes on the element type might be restricted by the presence of this type."
14	typarray	OID			"if typarray is not zero then it identifies another row in pg_type, which is the “true” array type having this type as element"
15	typinput	REGPROC			"input conversion function (text format)"
16	typoutput	REGPROC			"output conversion function (text format)"
17	typreceive	REGPROC			"input conversion function (binary format), or zero if none"
18	typsend	REGPROC			"output conversion function (binary format), or zero if none"
19	typmodin	REGPROC			"type modifier input function, or zero if type does not support modifiers"
20	typmodout	REGPROC			"type modifier output function, or zero to use the standard format"
21	typanalyze	REGPROC			"custom analyze function, or zero to use the standard function"
22	typalign	CHAR			"typalign is the alignment required when storing a value of this type. it applies to storage on disk as well as most representations of the value inside postgresql. when multiple values are stored consecutively, such as in the representation of a complete row on disk, padding is inserted before a datum of this type so that it begins on the specified boundary. the alignment reference is the beginning of the first datum in the sequence. possible values are:"
23	typstorage	CHAR			"typstorage tells for varlena types (those with typlen = -1) if the type is prepared for toasting and what the default strategy for attributes of this type should be. possible values are:x is the usual choice for toast-able types. note that m values can also be moved out to secondary storage, but only as a last resort (e and x values are moved first)."
24	typnotnull	BOOL			"typnotnull represents a not-null constraint on a type. used for domains only."
25	typbasetype	OID			"if this is a domain (see typtype), then typbasetype identifies the type that this one is based on. zero if this type is not a domain."
26	typtypmod	INT4			"domains use typtypmod to record the typmod to be applied to their base type (-1 if base type does not use a typmod). -1 if this type is not a domain."
27	typndims	INT4			"typndims is the number of array dimensions for a domain over an array (that is, typbasetype is an array type). zero for types other than domains over array types."
28	typcollation	OID			"typcollation specifies the collation of the type. if the type does not support collations, this will be zero. a base type that supports collations will have a nonzero value here, typically default_collation_oid. a domain over a collatable type can have a collation oid different from its base type's, if one was specified for the domain."
29	typdefaultbin	PG_NODE_TREE			"if typdefaultbin is not null, it is the nodetostring() representation of a default expression for the type. this is only used for domains."
30	typdefault	TEXT			"typdefault is null if the type has no associated default value. if typdefaultbin is not null, typdefault must contain a human-readable version of the default expression represented by typdefaultbin. if typdefaultbin is null and typdefault is not, then typdefault is the external representation of the type's default value, which can be fed to the type's input converter to produce a constant."
31	typacl	ACLITEM[]			"access privileges; see section 5.7 for details"
